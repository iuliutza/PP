#lang racket
(require racket/match)
(require "queue.rkt")

(provide (all-defined-out))

(define ITEMS 5)

;; ATENȚIE: Pentru această etapă a temei este necesar să implementați
;;          întâi TDA-ul queue în fișierul queue.rkt.
;; Reveniți la sarcinile din acest fișier după ce ați implementat tipul 
;; queue și ați verificat implementarea folosind checker-ul.


; Structura counter nu se modifică.
; Ceea ce se modifică este implementarea câmpului queue:
; - în loc de listă, acesta va fi o coadă (o structură de tip queue)
; - acest lucru nu este vizibil în definiția structurii counter,
;   ci în implementarea operațiilor acestui tip de date (tipul counter)
(define-struct counter (index tt et queue) #:transparent)


; TODO
; Actualizați funcțiile de mai jos astfel încât ele să folosească
; o structură de tip queue pentru reprezentarea cozii de persoane.
; Elementele cozii continuă să fie perechi (nume . nr_produse).
; Este esențial să respectați "bariera de abstractizare", adică să
; operați cu coada doar folosind interfața acestui TDA:
; - empty-queue
; - queue-empty?
; - enqueue
; - dequeue
; - top
; Obs: Doar câteva funcții vor necesita actualizări.
(define (empty-counter index)           ; testată de checker
  (make-counter index 0 0 empty-queue))

(define (update f counters index)
  (cond
    ((null? counters) null)
    ((equal? index (counter-index (car counters))) (append (list (f (car counters))) (update f (cdr counters) index)))
    (else (cons (car counters) (update f (cdr counters) index)))))

(define (tt+ minutes)
  (λ (C) (match C
           [(counter index tt et queue)
            (counter index (+ tt minutes) et queue)])))

(define (et+ minutes)
  (λ (C) (match C
           [(counter index tt et queue)
            (counter index tt (+ et minutes) queue)])))

(define (add-to-counter name items)     ; testată de checker
  (λ (C)                                ; nu modificați felul în care funcția își primește argumentele
    (if (queue-empty? (counter-queue C))
        (match C
          [(counter index tt et queue)
           (counter index (+ items (counter-tt C)) (+ items (counter-et C)) (enqueue (cons name items) (counter-queue C)))])
        (match C
          [(counter index tt et queue)
           (counter index (+ items (counter-tt C)) et (enqueue (cons name items) (counter-queue C)))]))))

(define (min-thingy lst1 lst2)
  (cond
    ((< (cdr lst1) (cdr lst2) )  lst1)
    ((> (cdr lst1) (cdr lst2) )  lst2)
    (else
     (if (< (car lst1) (car lst2))
         lst1
         lst2))))

(define (min-tt counters)
  (if(null? (cdr counters))
     (cons (counter-index (car counters)) (counter-tt (car counters)))
     (min-thingy (cons(counter-index (car counters)) (counter-tt (car counters))) (min-tt (cdr counters)))))

(define (min-et counters)
  (cond
    ((null? (cdr counters)) (cons (counter-index (car counters)) (counter-et (car counters))))
    (else (min-thingy (cons (counter-index (car counters)) (counter-et (car counters))) (min-et (cdr counters))))))



(define (remove-first-from-counter C)   ; testată de checker
  (cond
    ;left right sunt goale
    ((queue-empty? (counter-queue C))
     (match C
       [(counter index tt et queue)
        (counter index 0 0 empty-queue)]))
    ;mai este un singur elem in right
    ((and (not(null? (queue-right (counter-queue C)))) (null? (cdr (queue-right (counter-queue C)))))
     (match C
       [(counter index tt et queue)
        (counter index 0 0 empty-queue)]))
    ;left e goala right e plina
    ((and (not (null? (queue-right (counter-queue C)))) (null? (queue-left (counter-queue C))))
     (match C
       [(counter index tt et queue)
        (counter index (- tt et) (cdr (car (queue-left (dequeue queue)))) (dequeue queue))]))
    ;mai este un singur elem in left
    ((null? (cdr (queue-left (counter-queue C))))
     (match C
       [(counter index tt et queue)
        (counter index 0 0 empty-queue)]))
    
    ;sunt 2 sau mai multe elem in left
    (else
     (match C
       [(counter index tt et queue)
        (counter index (- tt et) (cdr (cadr (queue-left queue))) (dequeue queue))]))))




; TODO
; Implementați o funcție care calculează starea unei case după un număr dat de minute.
; Funcția presupune, fără să verifice, că în acest timp nu a ieșit nimeni din coadă, 
; deci va avea efect doar asupra câmpurilor tt și et.
; (cu alte cuvinte, este responsabilitatea utilizatorului să nu apeleze această funcție
; cu minutes > timpul până la ieșirea primului client din coadă)
; Atenție: casele fără clienți nu trebuie să ajungă la timpi negativi!
(define (pass-time-through-counter minutes)
  (λ (C)
    (if (< (- (counter-tt C) minutes) 0)
        (match C
          [(counter index tt et queue)
           (counter index 0 0 empty-queue)])
        (match C
          [(counter index tt et queue)
           (counter index (- tt minutes) (- et minutes) queue)]))))
  

; TODO
; Implementați funcția care simulează fluxul clienților pe la case.
; ATENȚIE: Față de etapa 2, apar modificări în:
; - formatul listei de cereri (parametrul requests)
; - formatul rezultatului funcției (explicat mai jos)
; requests conține 4 tipuri de cereri (3 moștenite din etapa 2 plus una nouă):
;   - (<name> <n-items>) - persoana <name> trebuie așezată la coadă la o casă            (ca înainte)
;   - (delay <index> <minutes>) - casa <index> este întârziată cu <minutes> minute       (ca înainte)
;   - (ensure <average>) - cât timp tt-ul mediu al tuturor caselor este mai mare decât
;                          <average>, se adaugă case fără restricții (case slow)         (ca înainte)
;   - <x> - trec <x> minute de la ultima cerere, iar starea caselor se actualizează
;           corespunzător (cu efect asupra câmpurilor tt, et, queue)                     (   NOU!   )
; Obs: Au dispărut cererile de tip remove-first, pentru a lăsa loc unui mecanism mai 
; sofisticat de a scoate clienții din coadă (pe măsură ce trece timpul).
; Sistemul trebuie să proceseze cele 4 tipuri de cereri în ordine, astfel:
; - persoanele vor fi distribuite la casele cu tt minim (dintre casele la care au voie)  (ca înainte)
; - când o casă suferă o întârziere, tt-ul și et-ul ei cresc (chiar dacă nu are clienți) (ca înainte)
; - tt-ul mediu (ttmed) se calculează pentru toate casele (și cele fast, și cele slow), 
;   iar la nevoie veți adăuga case slow una câte una, până când ttmed <= <average>       (ca înainte)
; - când timpul prin sistem avansează cu <x> minute, tt-ul, et-ul și queue-ul tuturor 
;   caselor se actualizează pentru a reflecta trecerea timpului; dacă unul sau mai mulți 
;   clienți termină de stat la coadă, ieșirile lor sunt contorizate în ordine cronologică.
; Rezultatul funcției serve va fi o pereche cu punct între:
; - lista sortată cronologic a clienților care au părăsit supermarketul
;   - fiecare element din listă va avea forma (index_casă . nume)
;   - dacă mai mulți clienți ies simultan, sortați-i crescător după indexul casei
; - lista caselor în starea finală (ca rezultatul din etapele 1 și 2)
; Obs: Pentru a contoriza ieșirile din cozi, puteți să lucrați într-o funcție ajutătoare
; (cu un parametru în plus față de funcția serve), pe care serve doar o apelează.

(define (add-delay lst index minutes)
  (let* ([new-lst (update (tt+ minutes) lst index)]) (update (et+ minutes) new-lst index)))

(define (find-average counters)
  (/ (foldr (lambda (x y) (+ x y)) 0 (map (λ (C) (counter-tt C)) counters)) (length counters)))

(define (add-counters counters average all-counters)
  (if (> (find-average all-counters) average)
      (add-counters (append counters (list (empty-counter (add1 (length all-counters))))) average (append all-counters (list (empty-counter (add1 (length all-counters))))))
      counters))

(define (calc-param C minutes)
  (define minutes-passed (- minutes (counter-et C)))
  (if (zero? (counter-et (remove-first-from-counter C)))
      (match (remove-first-from-counter C)
        [(counter index tt et queue)
         (counter index 0 0 queue)])
      
      (match (remove-first-from-counter C)
        [(counter index tt et queue)
         (counter index (- tt minutes-passed) (- et minutes-passed) queue)])))

(define (sort-clients lst )
  (map (λ (el) (cdr el)) (sort lst #:key car >)))

(define (add-clients-to-list counters lst minutes new-counters)
  (cond
    ((null? counters) (cons (sort-clients lst) (reverse new-counters)))
    ((< minutes (counter-et (car counters)))  (add-clients-to-list (cdr counters) lst minutes (append (list ((pass-time-through-counter minutes) (car counters))) new-counters)))
    (else   (cond
              ((queue-empty? (counter-queue(car counters))) (add-clients-to-list (cdr counters) lst minutes (append (list (calc-param (car counters) minutes)) new-counters)))
              (else (add-clients-to-list (cdr counters) (append (list (cons (counter-et (car counters)) (cons (counter-index (car counters)) (car (top (counter-queue (car counters))))))) lst)
                                         minutes (append (list (calc-param (car counters) minutes)) new-counters)))))))

(define (split lst f-lst s-lst n index)
  (cond
    ((null? lst) (cons (reverse f-lst) (reverse s-lst)))
    ((<= index n) (split (cdr lst) (append (list (car lst)) f-lst) s-lst (- n 1) (add1 index)))
    (else (split (cdr lst) f-lst (append (list (car lst)) s-lst) (- n 1) (add1 index)))))



(define (serve requests fast-counters slow-counters ) 
  (serve-helper requests  fast-counters slow-counters '()))

(define (serve-helper requests fast-counters slow-counters lst) ;cause we always love a new lst
  (define big-list (append fast-counters slow-counters))
  (if (null? requests)
      (cons (reverse lst) (append fast-counters slow-counters))
      (match (car requests)
        [(list 'ensure average)(let* ([new-s-counters (add-counters slow-counters average big-list)]) (serve-helper (cdr requests) fast-counters new-s-counters lst))]
        
        [(list name n-items) (if (> n-items ITEMS)
                                 (let* ([new-s-counters (update (add-to-counter name n-items) slow-counters (car (min-tt slow-counters)))]) (serve-helper (cdr requests) fast-counters new-s-counters lst))
                                 (let* ([new-f-counters (update (add-to-counter name n-items) fast-counters (car (min-tt big-list)))]
                                        [new-s-counters (update (add-to-counter name n-items) slow-counters (car (min-tt big-list)))])
                                   (serve-helper (cdr requests) new-f-counters new-s-counters lst)))]
        
        [(list 'delay index minutes)(let* ([new-f-counters (add-delay fast-counters index minutes)]
                                           [new-s-counters (add-delay slow-counters index minutes)])
                                      (serve-helper (cdr requests) new-f-counters new-s-counters lst))]

        [x (let* ([new-list (add-clients-to-list big-list '() x '())]
                  [clients-list (car new-list)]
                  [new-counters (cdr new-list)]
                  [new-f-counters (car (split new-counters '() '() (length fast-counters) 0))]
                  [new-s-counters (cdr (split new-counters '() '() (length fast-counters) 0))])
             (serve-helper (cdr requests) new-f-counters  new-s-counters (append clients-list lst)))])))









  

(define C1 (empty-counter 1))
(define C2 (empty-counter 2))
(define C3 (empty-counter 3))
(define C4 (empty-counter 4))
(define C5 (make-counter 5 12 8 (queue '((remus . 6) (vivi . 4)) '() 2 0)))


